// 所有权
fn main() {
  // 所有计算机都必须管理其使用计算机内存都方式
  // 1. 一些语言中具有垃圾回收机制
  // 2. 另一些语言中 程序员必须亲自分配和释放内存
  // 3. rust 选择通过所有权系统管理内存，编译器在编译时会根据一系列的规则进行检查，在运行时，所有权系统的任何功能都不会减慢程序

  // 字符串
  // 栈（Stack）与 堆（Heap）
  // 大多数语言中都不需要考虑堆栈，但是在 rust 语言当中，值是位于堆上还是栈上 在更大程度上影响了语言的行为已经为何必须要做出这样的抉择
  // 栈和堆都是代码在运行时可提供使用的内存，但是它们的结构不同，栈以放入值的顺序存储值，并以相反顺序取出值，这也被称作 后进先出。想象一下一叠盘子：当增加更多盘子时，把他们放在盘子堆的顶部，当需要盘子时，也从顶部拿走。不能从中间也不能从底部增加或者拿走盘子！增加数据叫做 `进栈`，而移出数据叫做 `出栈`。

  // 
}